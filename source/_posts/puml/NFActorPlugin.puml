@startuml

class NFActorModule{
    Execute();
    ExecuteEvent();
    ExecuteResultEvent();
	NF_SHARE_PTR<NFIActor> RequireActor();
    SendMsgToActor(const NFGUID actorIndex, const NFActorMessage& message);
	AddEndFunc(const int subMessageID, ACTOR_PROCESS_FUNCTOR_PTR functorPtr_end);
    NFIThreadPoolModule* m_pThreadPoolModule;
	std::map<NFGUID, NF_SHARE_PTR<NFIActor>> mxActorMap;
	NFQueue<NFActorMessage> mxResultQueue;
	NFMapEx<int, ACTOR_PROCESS_FUNCTOR> mxEndFunctor;
}
class NFActor{
    Execute();
    AddComponent(NF_SHARE_PTR<NFIComponent> pComponent);
	RemoveComponent(const std::string& strComponentName);
    SendMsg(const int eventID, const std::string& data, const std::string& arg);
    SendMsg(const NFActorMessage& message);
    AddMessageHandler(const int nSubMsgID, ACTOR_PROCESS_FUNCTOR_PTR xBeginFunctor);
	NFIActorModule* m_pActorModule;
    NFQueue<NFActorMessage> mMessageQueue;
	NFMapEx<std::string, NFIComponent> mComponent;
	NFMapEx<int, ACTOR_PROCESS_FUNCTOR> mxProcessFunctor;
}
class NFIComponent{
   Execute();
}
NFActorModule -- NFActor
NFActor -- NFIComponent

@enduml

// 时序图
@startuml

MainThread --> MainThread:NFActorModule::RequireActor
MainThread --> MainThread:NFActor::AddComponent
MainThread --> MainThread:NFIComponent::AddMessageHandler
MainThread --> MainThread:NFActor::AddMessageHandler
MainThread --> MainThread:NFActorModule::AddEndFunc
MainThread --> MainThread:NFActorModule::mxEndFunctor.AddElement
MainThread --> MainThread:NFActorModule::SendMsgToActor
MainThread --> MainThread: NFActor::mMessageQueue.Push
MainThread --> MainThread:NFActorModule::Execute
MainThread --> MainThread:NFActorModule::ExecuteEvent
MainThread --> MainThread:NFActorModule::DoAsyncTask(NFActor->Execute)

WorkThreads --> WorkThreads:NFActor::Execute
WorkThreads --> WorkThreads:NFActor::mMessageQueue.TryPop(messageObject)
WorkThreads --> WorkThreads:NFActor::xBeginFunctor = mxProcessFunctor.GetElement(messageObject.msgID)
WorkThreads --> WorkThreads:NFActor::xBeginFunctor->operator()(messageObject);
WorkThreads --> WorkThreads:NFActor::NFActorModule::AddResult(messageObject)
WorkThreads --> WorkThreads:NFActor::NFActorModule::mxResultQueue.Push

MainThread --> MainThread:NFActorModule::ExecuteResultEvent
MainThread --> MainThread:NFActorModule::NFActorModule::mxResultQueue.try_dequeue(actorMessage)
MainThread --> MainThread:NFActorModule::functorPtr_end = mxEndFunctor.GetElement(actorMessage.msgID);
MainThread --> MainThread:NFActorModule::functorPtr_end->operator()(actorMessage);
@enduml
